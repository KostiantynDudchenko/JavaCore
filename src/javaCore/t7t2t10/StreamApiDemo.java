package javaCore.t7t2t10;

/*Напишите метод, возвращающий стрим псевдослучайных целых чисел. Алгоритм генерации чисел следующий:

Берется какое-то начальное неотрицательное число (оно будет передаваться в ваш метод проверяющей системой).
Первый элемент последовательности устанавливается равным этому числу.
Следующие элементы вычисляются по рекуррентной формуле Rn+1=mid(Rn2),
где mid — это функция, выделяющая второй, третий и четвертый разряд переданного числа. Например, mid(123456)=345.
Алгоритм, конечно, дурацкий и не выдерживающий никакой критики, но для практики работы со стримами сойдет :)

Рассматривается класс задач, которые обладают таким свойством: вычисляя значения интересующей нас величины,
мы пользуемся только фиксированным числом последних значений, что позволяет обойтись сравнительно небольшим
объемом памяти. Последовательности с таким свойством называют рекуррентными.

Пример ввода: 13
Пример вывода: 13, 16, 25, 62, 384, 745, 502, 200, 0, ... (дальше бесконечное количество нулей)

Требования:
1. Должен быть метод public static IntStream pseudoRandomStream(int seed)
2. Метод должен возвращать поток, удовлетворяющий условию*/

import java.util.stream.IntStream;

public class StreamApiDemo {

    public static IntStream pseudoRandomStream(int seed) {
        IntStream is = IntStream.iterate(seed,  x -> (x * x) / 10 % 1000 );
        return is;//твой код здесь
    }

    public static void main(String[] args) {
        StreamApiDemo.pseudoRandomStream(13);
    }
}
